/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as SettingsImport } from './routes/settings'
import { Route as GroupsImport } from './routes/groups'
import { Route as IndexImport } from './routes/index'
import { Route as UsersCreateImport } from './routes/users.create'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const GroupsRoute = GroupsImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersCreateRoute = UsersCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => UsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/groups': {
      id: '/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/users/create': {
      id: '/users/create'
      path: '/create'
      fullPath: '/users/create'
      preLoaderRoute: typeof UsersCreateImport
      parentRoute: typeof UsersImport
    }
  }
}

// Create and export the route tree

interface UsersRouteChildren {
  UsersCreateRoute: typeof UsersCreateRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersCreateRoute: UsersCreateRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/groups': typeof GroupsRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRouteWithChildren
  '/users/create': typeof UsersCreateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/groups': typeof GroupsRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRouteWithChildren
  '/users/create': typeof UsersCreateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/groups': typeof GroupsRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRouteWithChildren
  '/users/create': typeof UsersCreateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/groups' | '/settings' | '/users' | '/users/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/groups' | '/settings' | '/users' | '/users/create'
  id: '__root__' | '/' | '/groups' | '/settings' | '/users' | '/users/create'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GroupsRoute: typeof GroupsRoute
  SettingsRoute: typeof SettingsRoute
  UsersRoute: typeof UsersRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GroupsRoute: GroupsRoute,
  SettingsRoute: SettingsRoute,
  UsersRoute: UsersRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/groups",
        "/settings",
        "/users"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/groups": {
      "filePath": "groups.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/create"
      ]
    },
    "/users/create": {
      "filePath": "users.create.tsx",
      "parent": "/users"
    }
  }
}
ROUTE_MANIFEST_END */
